gRPC microservices are the future ?
Build scalable gRPC services with go deployed to GKE

Golang Nantes Meetup
21 September 2017

Cyrille Hemidy
[[http://LivingPackets.com][LivingPackets]]

@chemidy
[[http://www.goheroe.org][+GoHeroe]]


* Hello Gophers
.image gopher.jpg 512 _

* @work
.image livingpackets.png 484 _
- See [[https://www.livingpackets.com/en][LivingPackets.com]]

* Agenda
- What are microservices, gRPC, Protocol Buffers ?
- A little bit of history
- REST vs gRPC
- Develop gRPC microservices with Go
- Call gRPC microservices with (IOS, Android, Angular)
- Manage local microservices
- Deploy microservices on GKE
- Manage API with Cloud Endpoints
- Build Docker images 
- Conclusion

* Let's dive into gRPC microservices ecosystem
.background home.jpg
.image crazy.jpg 1 _

* What are microservices ?
.image architecture.png 484 _
- See [[https://www.youtube.com/watch?v=lRDgOpsV2zA][Microservices are the Future (And Always Will Be)  - Josh Holtzman, PayPal]]

* Monolithic VS microservices ?
.image microservices.png 384 _

- See [[http://netflix.github.io/][Netflix Open Source Software Center]]
- See [[https://github.com/Netflix/Hystrix][Hystrix is a latency and fault tolerance library stop cascading failure]]
- See [[https://github.com/Netflix/ribbon][Ribbon is a Inter Process Communication (remote procedure calls) library]]

* A little bit of history
- 2011 : [[https://developers.google.com/protocol-buffers/][Protocol Buffers 2]] => language neutral for serializing structured data
- 2015 : [[https://static.googleusercontent.com/media/research.google.com/fr//pubs/archive/43438.pdf][Borg]] => Large-scale cluster management => [[https://kubernetes.io/][Kubernetes]]
- 2015 : [[https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html][Stubby]] => A high performance RPC framework => [[https://grpc.io/][gRPC]]
- July 2016 : Protocol Buffers 3.0.0
- Aug 2016 : gRPC 1.0 ready for production
- Sept 2016 : [[https://github.com/apple/swift-protobuf][Swift-protobuf]]
- Jan 2017 : [[https://github.com/grpc/grpc-swift][Grpc Swift]]
- Apr 2017 : [[https://cloud.google.com/endpoints/][Google Endpoints]] => Manage gRPC APIs with Cloud Endpoints
- Sept 2017 : gRPC 1.6.1
- Sept 2017 : Protocol Buffers 3.4.1

* What is gRPC ?
.image grpc.png 192 _
- High performance, open-source RPC (Remote Procedure Call) framework that uses Google Protocol Buffers as the IDL (Interface Description Language)
- Actively developed and production ready
- Current Version is 1.6.1
- See [[https://grpc.io/][gRPC.io]]

* gRPC speaks a lot of languages
- C/C++
- Java
- Python
- Ruby 
- Node.js
- C#
- Go
- PHP 
- Objective-C
- Swift (in progress)

* gRPC lets you define 4 kinds of service
- *Unary* : client sends a single request and gets a single response
- *Server* *streaming* : client sends a request and gets a stream of messages
- *Client* *streaming* : client sends a stream of messages and gets a single response
- *Bidirectional* *streaming* :  both sides send a sequence of messages using a read-write stream. The two streams operate independently. The order of messages in each stream is preserved

* gRPC Interoperability
.image landing.svg 512 _

* gRPC is designed for future
- Open source
- plugins
- HTTP/2 for transport (Multiplexing, Header Compression, Binary framing)
- Design for fault tolerance (Deadlines, Cancellations)
- Very fast and efficient Protobuf serialization
- Interceptors on client and server
- Tracing
- ...
- See [[http://bit.ly/grpcmeetings][gRPC Community Meeting Working Doc / RoadMap]]

* What is Protocol Buffers ?
- Protocol buffers are Google's language-neutral, platform-neutral, flexible, efficient, extensible mechanism for serializing structured data
.code goheroe.proto
- See [[http://www.golangdevops.com/2017/08/16/why-not-to-use-protos-in-code/][Protocol buffers: Avoid these uses]]

* REST vs gRPC
- JSON  vs PROTO 
 - plain text vs binary
 - human readable vs binary (compressed)
 - (de)serialization vs faster (de)serialization
 - Good support vs early adopter
- HTTP 1.1 vs [[https://http2.github.io/faq/][HTTP2]] [[https://http2.golang.org/gophertiles?latency=0][ : Demo HTTP2]]
 - plain text vs binary (compressed)
 - 1 connection by request vs persistent connection
 - polling vs streaming 
 - no TLS by default vs TLS
 - Good support vs early adopter
- SWAGGER + plugins vs PROTOC + plugins
- Browser support vs no Browser support
- no cascade failure vs [[https://landing.google.com/sre/book/chapters/addressing-cascading-failures.html][cascade failure addressed]]
- N/A vs Tracing, Metadata

* REST vs gRPC performance
.image rest_vs_grpc.png 484 _
- See [[https://public.tableau.com/profile/sandeep.dinesh#!/vizhome/gRPCvsREST-2016/gRPCvsRest][gRPC vs REST - Go vs node.js]]

* Whos is using gRPC ?
- Google, Kubernetes, Cisco, Docker, ...
.image use_grpc.png 512 _

* gRPC microservices are the future ?
.background cover.jpg
- Yes !!!
- Yes !!!
- Yes !!!

* Develop gRPC microservices with Go Workflow
.image dev_grpc.png 512 _
- See Book [[https://www.amazon.fr/Building-Microservices-Go-Nic-Jackson/dp/1786468662][Building Microservices with Go]]

* Define services and messages
.code goheroe.proto
- See  [[https://developers.google.com/protocol-buffers/docs/proto3][proto3 Language Guide]]

* Generate code with protoc

- Generate Go code with protoc
 protoc -I ./proto/ ./proto/goheroe.proto --go_out=plugins=grpc:proto

- Generate Swift code with protoc
 protoc -I . backend*.proto \
 --proto_path=${GOPATH}/src \
 --swift_out=../api/swift \
 --swiftgrpc_out=../api/swift \
 --swift_opt=Visibility=Public

- Generate Java code with protoc
 protoc -I . backend*.proto \
 --proto_path=${GOPATH}/src \
 --plugin=protoc-gen-javalite=$(GOPATH)/bin/protoc-gen-javalite \
 --plugin=protoc-gen-grpc-java=$(GOPATH)/bin/protoc-gen-grpc-java \
 --grpc-java_out=lite:../api/lpGrpc.jar \
 --javalite_out=../api/lpGrpc.jar 

* gRPC server
.code main.go

* Implement gRPC server
.code server.go

* Implement gRPC client
.code client.go

* Demo protoc
.image vscode.png 512 _

* Call gRPC services from Mobile (IOS,Android)
.code hello.java

- See [[https://grpc.io/docs/tutorials/basic/android.html][gRPC doc for android]]
- See [[https://github.com/grpc/grpc-java/tree/v1.6.x/examples/android][Hello World for android]]

* Call gRPC services from Angular with a gateway
- grpc-gateway is a plugin of protoc. It reads gRPC service definition, and generates a reverse-proxy server which translates a RESTful JSON API into gRPC
.image grpc_gateway.png 384 _
- See [[https://github.com/grpc-ecosystem/grpc-gateway][Go grpc-gateway : gRPC to JSON proxy generator]]

* Manage local microservices
- Edward is a very nice tool to manage a large amount of microservices with automatically rebuild on edit.
- A quick list of features :
 - Start multiple services (group)
 - Restart a service or multiple services
 - Check status of running services
 - Check logs of running services
 - Auto-generate service configuration for: go / Docker
 - Auto-restart on 
 
- See [[https://github.com/yext/edward][Edward Github]]
- See [[http://engblog.yext.com/edward/][Edward docs]]

* Demo Edward
.image vscode.png 512 _

* Deploy gRPC microservices on GKE
.background cover2.jpg
.image crazy.jpg 1 _

* Cloud endpoints
.image endpoints_arch.png 512 _

* Deploy endpoints

- Generate config file
	protoc -I proto --include_imports --include_source_info back.proto --descriptor_set_out out.pb

- Deploy Google Endpoint
	gcloud service-management deploy endpoints.pb ../config/endpoints/api_config.yaml

- api_config.yaml
 type: google.api.Service
 config_version: 3
 name: hello.endpoints.my_google_project.cloud.goog
 title: auth gRPC API
 apis:
 - name: api.Hello
 usage:
  rules:
  # Allow unregistered calls for all methods.
  - selector: "*"
    allow_unregistered_calls: true

* Build Docker images
- Build image and push to gc.io
	gcloud container builds submit . \
	--config=config/docker/cloudbuild.yaml \
	--substitutions _VERSION=${V},_SERVICE=${S}
- cloudbuild.yaml
 steps:
 - name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-f', 'config/docker/Dockerfile.${_SERVICE}', 
  '-t', 'gcr.io/$PROJECT_ID/go-grpc-${_SERVICE}:${_VERSION}', '.']
  dir: '.'
  images: ['gcr.io/$PROJECT_ID/go-grpc-${_SERVICE}:${_VERSION}']
 

* Deploy to GKE
- deploy Load Balancer
  kubectl create -f myconfig.yaml
- lb.yaml
  apiVersion: v1
 kind: Service
 metadata:
  name: lb-grpc-hello
 spec:
  type: LoadBalancer
  loadBalancerIP: 118.218.118.218
  ports:
  - name: http
    port: 80
    targetPort: 9000
    protocol: TCP
  selector:
    app: grpc-hello

* Demo K8
.image vscode.png 484 _
- See [[https://www.youtube.com/watch?v=YiNt4kUnnIM][Building high performance microservices with Kubernetes, Go, and gRPC]]

* Conclusion
.background conclusion.jpg
.image crazy.jpg 1 _
* ?
.background QA.jpg
