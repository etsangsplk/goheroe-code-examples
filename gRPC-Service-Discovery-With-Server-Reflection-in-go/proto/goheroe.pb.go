// Code generated by protoc-gen-go. DO NOT EDIT.
// source: goheroe.proto

/*
Package superpower is a generated protocol buffer package.

It is generated from these files:
	goheroe.proto

It has these top-level messages:
	SuperPower
	SuperPowers
	Filter
*/
package superpower

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// List from http://powerlisting.wikia.com/wiki/Category:Main_Categories?display=page&sort=mostvisited
type SuperPowerCategory int32

const (
	SuperPowerCategory_All                    SuperPowerCategory = 0
	SuperPowerCategory_Absorption             SuperPowerCategory = 200
	SuperPowerCategory_Absorption1Alias       SuperPowerCategory = 200
	SuperPowerCategory_Absorption2Alias       SuperPowerCategory = 200
	SuperPowerCategory_Absorption3Alias       SuperPowerCategory = 200
	SuperPowerCategory_Absorption4Alias       SuperPowerCategory = 200
	SuperPowerCategory_Affinity               SuperPowerCategory = 201
	SuperPowerCategory_AppearanceAlteration   SuperPowerCategory = 202
	SuperPowerCategory_ArchetypalPowers       SuperPowerCategory = 203
	SuperPowerCategory_BodilyFunctionalPowers SuperPowerCategory = 300
	SuperPowerCategory_CellularManipulation   SuperPowerCategory = 401
	SuperPowerCategory_Combinations           SuperPowerCategory = 402
	SuperPowerCategory_ConceptualPowers       SuperPowerCategory = 403
	SuperPowerCategory_CosmicBasedPowers      SuperPowerCategory = 404
	SuperPowerCategory_CrossoverPowers        SuperPowerCategory = 405
	SuperPowerCategory_DeathbasedAbilities    SuperPowerCategory = 500
	SuperPowerCategory_DemonicPowers          SuperPowerCategory = 501
	SuperPowerCategory_ElementalManipulation  SuperPowerCategory = 600
	SuperPowerCategory_Empowerments           SuperPowerCategory = 601
	SuperPowerCategory_Econt                  SuperPowerCategory = 602
	SuperPowerCategory_Enhancements           SuperPowerCategory = 603
	SuperPowerCategory_FundamentalForces      SuperPowerCategory = 700
	SuperPowerCategory_Intuition              SuperPowerCategory = 800
	SuperPowerCategory_MagicalPowers          SuperPowerCategory = 0
	SuperPowerCategory_Manipulations          SuperPowerCategory = 901
	SuperPowerCategory_MetaPowers             SuperPowerCategory = 902
	SuperPowerCategory_Mimicry                SuperPowerCategory = 903
	SuperPowerCategory_MolecularManipulation  SuperPowerCategory = 904
	SuperPowerCategory_MythologicalMimicry    SuperPowerCategory = 905
	SuperPowerCategory_Negation               SuperPowerCategory = 1000
	SuperPowerCategory_NonFightingPower       SuperPowerCategory = 1001
	SuperPowerCategory_ObjectbasedPowers      SuperPowerCategory = 1100
	SuperPowerCategory_OmnipotentPowers       SuperPowerCategory = 1101
	SuperPowerCategory_Omniversepowers        SuperPowerCategory = 1102
	SuperPowerCategory_PersonalPhysicalPowers SuperPowerCategory = 1200
	SuperPowerCategory_PhysicsBasedPowers     SuperPowerCategory = 1201
	SuperPowerCategory_Physiology             SuperPowerCategory = 1202
	SuperPowerCategory_Powerwithnoknownuser   SuperPowerCategory = 1203
	SuperPowerCategory_PrimordialPowers       SuperPowerCategory = 1204
	SuperPowerCategory_SciencePowers          SuperPowerCategory = 1300
	SuperPowerCategory_SensoryPowers          SuperPowerCategory = 1301
	SuperPowerCategory_SpiritualPowers        SuperPowerCategory = 1302
	SuperPowerCategory_SupernaturalPowers     SuperPowerCategory = 1303
	SuperPowerCategory_SuperpowerManipulation SuperPowerCategory = 1304
	SuperPowerCategory_TechnologybasedPowers  SuperPowerCategory = 1400
	SuperPowerCategory_TranscendentPowers     SuperPowerCategory = 1401
)

var SuperPowerCategory_name = map[int32]string{
	0:   "All",
	200: "Absorption",
	// Duplicate value: 200: "Absorption1Alias",
	// Duplicate value: 200: "Absorption2Alias",
	// Duplicate value: 200: "Absorption3Alias",
	// Duplicate value: 200: "Absorption4Alias",
	201: "Affinity",
	202: "AppearanceAlteration",
	203: "ArchetypalPowers",
	300: "BodilyFunctionalPowers",
	401: "CellularManipulation",
	402: "Combinations",
	403: "ConceptualPowers",
	404: "CosmicBasedPowers",
	405: "CrossoverPowers",
	500: "DeathbasedAbilities",
	501: "DemonicPowers",
	600: "ElementalManipulation",
	601: "Empowerments",
	602: "Econt",
	603: "Enhancements",
	700: "FundamentalForces",
	800: "Intuition",
	// Duplicate value: 0: "MagicalPowers",
	901:  "Manipulations",
	902:  "MetaPowers",
	903:  "Mimicry",
	904:  "MolecularManipulation",
	905:  "MythologicalMimicry",
	1000: "Negation",
	1001: "NonFightingPower",
	1100: "ObjectbasedPowers",
	1101: "OmnipotentPowers",
	1102: "Omniversepowers",
	1200: "PersonalPhysicalPowers",
	1201: "PhysicsBasedPowers",
	1202: "Physiology",
	1203: "Powerwithnoknownuser",
	1204: "PrimordialPowers",
	1300: "SciencePowers",
	1301: "SensoryPowers",
	1302: "SpiritualPowers",
	1303: "SupernaturalPowers",
	1304: "SuperpowerManipulation",
	1400: "TechnologybasedPowers",
	1401: "TranscendentPowers",
}
var SuperPowerCategory_value = map[string]int32{
	"All":                    0,
	"Absorption":             200,
	"Absorption1Alias":       200,
	"Absorption2Alias":       200,
	"Absorption3Alias":       200,
	"Absorption4Alias":       200,
	"Affinity":               201,
	"AppearanceAlteration":   202,
	"ArchetypalPowers":       203,
	"BodilyFunctionalPowers": 300,
	"CellularManipulation":   401,
	"Combinations":           402,
	"ConceptualPowers":       403,
	"CosmicBasedPowers":      404,
	"CrossoverPowers":        405,
	"DeathbasedAbilities":    500,
	"DemonicPowers":          501,
	"ElementalManipulation":  600,
	"Empowerments":           601,
	"Econt":                  602,
	"Enhancements":           603,
	"FundamentalForces":      700,
	"Intuition":              800,
	"MagicalPowers":          0,
	"Manipulations":          901,
	"MetaPowers":             902,
	"Mimicry":                903,
	"MolecularManipulation":  904,
	"MythologicalMimicry":    905,
	"Negation":               1000,
	"NonFightingPower":       1001,
	"ObjectbasedPowers":      1100,
	"OmnipotentPowers":       1101,
	"Omniversepowers":        1102,
	"PersonalPhysicalPowers": 1200,
	"PhysicsBasedPowers":     1201,
	"Physiology":             1202,
	"Powerwithnoknownuser":   1203,
	"PrimordialPowers":       1204,
	"SciencePowers":          1300,
	"SensoryPowers":          1301,
	"SpiritualPowers":        1302,
	"SupernaturalPowers":     1303,
	"SuperpowerManipulation": 1304,
	"TechnologybasedPowers":  1400,
	"TranscendentPowers":     1401,
}

func (x SuperPowerCategory) String() string {
	return proto.EnumName(SuperPowerCategory_name, int32(x))
}
func (SuperPowerCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// A SuperPower is so cool
type SuperPower struct {
	Name    string             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Cat     SuperPowerCategory `protobuf:"varint,2,opt,name=cat,enum=superpower.SuperPowerCategory" json:"cat,omitempty"`
	CoolPow bool               `protobuf:"varint,3,opt,name=coolPow" json:"coolPow,omitempty"`
}

func (m *SuperPower) Reset()                    { *m = SuperPower{} }
func (m *SuperPower) String() string            { return proto.CompactTextString(m) }
func (*SuperPower) ProtoMessage()               {}
func (*SuperPower) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SuperPower) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SuperPower) GetCat() SuperPowerCategory {
	if m != nil {
		return m.Cat
	}
	return SuperPowerCategory_All
}

func (m *SuperPower) GetCoolPow() bool {
	if m != nil {
		return m.CoolPow
	}
	return false
}

// A List of so cool SuperPower
type SuperPowers struct {
	SuperPow []*SuperPower `protobuf:"bytes,1,rep,name=superPow" json:"superPow,omitempty"`
}

func (m *SuperPowers) Reset()                    { *m = SuperPowers{} }
func (m *SuperPowers) String() string            { return proto.CompactTextString(m) }
func (*SuperPowers) ProtoMessage()               {}
func (*SuperPowers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SuperPowers) GetSuperPow() []*SuperPower {
	if m != nil {
		return m.SuperPow
	}
	return nil
}

// An optional Filter just for fun
type Filter struct {
	Category SuperPowerCategory `protobuf:"varint,1,opt,name=category,enum=superpower.SuperPowerCategory" json:"category,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Filter) GetCategory() SuperPowerCategory {
	if m != nil {
		return m.Category
	}
	return SuperPowerCategory_All
}

func init() {
	proto.RegisterType((*SuperPower)(nil), "superpower.SuperPower")
	proto.RegisterType((*SuperPowers)(nil), "superpower.SuperPowers")
	proto.RegisterType((*Filter)(nil), "superpower.Filter")
	proto.RegisterEnum("superpower.SuperPowerCategory", SuperPowerCategory_name, SuperPowerCategory_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoHeroe service

type GoHeroeClient interface {
	List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SuperPowers, error)
	Add(ctx context.Context, in *SuperPower, opts ...grpc.CallOption) (*SuperPowers, error)
}

type goHeroeClient struct {
	cc *grpc.ClientConn
}

func NewGoHeroeClient(cc *grpc.ClientConn) GoHeroeClient {
	return &goHeroeClient{cc}
}

func (c *goHeroeClient) List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SuperPowers, error) {
	out := new(SuperPowers)
	err := grpc.Invoke(ctx, "/superpower.GoHeroe/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goHeroeClient) Add(ctx context.Context, in *SuperPower, opts ...grpc.CallOption) (*SuperPowers, error) {
	out := new(SuperPowers)
	err := grpc.Invoke(ctx, "/superpower.GoHeroe/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoHeroe service

type GoHeroeServer interface {
	List(context.Context, *Filter) (*SuperPowers, error)
	Add(context.Context, *SuperPower) (*SuperPowers, error)
}

func RegisterGoHeroeServer(s *grpc.Server, srv GoHeroeServer) {
	s.RegisterService(&_GoHeroe_serviceDesc, srv)
}

func _GoHeroe_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoHeroeServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superpower.GoHeroe/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoHeroeServer).List(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoHeroe_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperPower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoHeroeServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/superpower.GoHeroe/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoHeroeServer).Add(ctx, req.(*SuperPower))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoHeroe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "superpower.GoHeroe",
	HandlerType: (*GoHeroeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _GoHeroe_List_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _GoHeroe_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goheroe.proto",
}

func init() { proto.RegisterFile("goheroe.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0x1c, 0x45,
	0x13, 0xf6, 0x78, 0x36, 0x9e, 0xdd, 0x4a, 0x9c, 0xb4, 0xfb, 0x4d, 0x9c, 0x7d, 0x8d, 0x84, 0x2c,
	0x9f, 0x2c, 0x0e, 0x16, 0x6c, 0x40, 0x42, 0xdc, 0x26, 0x6b, 0x2f, 0x20, 0xb1, 0x89, 0x65, 0xe7,
	0x0f, 0xf4, 0xf6, 0x56, 0x76, 0x1a, 0x7a, 0xba, 0x47, 0xdd, 0x3d, 0xb1, 0x86, 0x3b, 0x5f, 0x12,
	0x17, 0xbe, 0x39, 0xf2, 0x03, 0x38, 0xf0, 0x75, 0xe4, 0x07, 0xf0, 0x7d, 0xe6, 0xe3, 0x0f, 0xc0,
	0x1d, 0x24, 0xb8, 0xa1, 0x9a, 0xd9, 0x9d, 0xdd, 0xc8, 0x06, 0x6e, 0xd3, 0x4f, 0x3d, 0x5d, 0xfd,
	0xd4, 0x53, 0x35, 0x05, 0x9b, 0x33, 0x9b, 0xa1, 0xb3, 0x78, 0x50, 0x38, 0x1b, 0x2c, 0x07, 0x5f,
	0x16, 0xe8, 0x0a, 0x7b, 0x86, 0x6e, 0x4f, 0x03, 0x9c, 0xd2, 0xe9, 0x98, 0x4e, 0x9c, 0x43, 0xc7,
	0x88, 0x1c, 0xfb, 0xd1, 0x6e, 0xb4, 0xdf, 0x3b, 0xa9, 0xbf, 0xf9, 0xe3, 0x10, 0x4b, 0x11, 0xfa,
	0xeb, 0xbb, 0xd1, 0xfe, 0xd5, 0xc1, 0xa3, 0x07, 0xcb, 0xbb, 0x07, 0xcb, 0x8b, 0x43, 0x11, 0x70,
	0x66, 0x5d, 0x75, 0x42, 0x54, 0xde, 0x87, 0x44, 0x5a, 0xab, 0x8f, 0xed, 0x59, 0x3f, 0xde, 0x8d,
	0xf6, 0xbb, 0x27, 0x8b, 0xe3, 0x5e, 0x0a, 0x97, 0x97, 0x97, 0x3c, 0x1f, 0x40, 0xd7, 0xcf, 0x8f,
	0xfd, 0x68, 0x37, 0xde, 0xbf, 0x3c, 0xd8, 0xbe, 0x38, 0xff, 0x49, 0xcb, 0xdb, 0x3b, 0x84, 0x8d,
	0x91, 0xd2, 0x01, 0x1d, 0x7f, 0x06, 0xba, 0x72, 0xfe, 0x6e, 0x2d, 0xf8, 0xbf, 0xd5, 0xb5, 0xfc,
	0xc7, 0xde, 0xec, 0x02, 0x3f, 0x4f, 0xe0, 0x09, 0xc4, 0xa9, 0xd6, 0x6c, 0x8d, 0x5f, 0x03, 0x48,
	0x27, 0xde, 0xba, 0x22, 0x28, 0x6b, 0xd8, 0x57, 0x11, 0xbf, 0x01, 0x6c, 0x09, 0x3c, 0x91, 0x6a,
	0x25, 0xfc, 0x39, 0x78, 0x70, 0x31, 0x7c, 0xeb, 0x62, 0xf8, 0xc9, 0x16, 0xde, 0x84, 0x6e, 0x7a,
	0xff, 0xbe, 0x32, 0x2a, 0x54, 0xec, 0xeb, 0x88, 0xff, 0x1f, 0xae, 0xa7, 0x45, 0x81, 0xc2, 0x09,
	0x23, 0x31, 0xa5, 0x52, 0x45, 0xad, 0xe2, 0x9b, 0x26, 0x81, 0x93, 0x19, 0x86, 0xaa, 0x10, 0xba,
	0x31, 0x91, 0x7d, 0x1b, 0xf1, 0x47, 0x60, 0xfb, 0xb6, 0x9d, 0x2a, 0x5d, 0x8d, 0x4a, 0x23, 0x89,
	0xdb, 0x06, 0x3f, 0x5e, 0xa7, 0x74, 0x43, 0xd4, 0xba, 0xd4, 0xc2, 0x8d, 0x85, 0x51, 0x45, 0xa9,
	0x9b, 0x74, 0x6f, 0xc5, 0x7c, 0x0b, 0xae, 0x0c, 0x6d, 0x3e, 0x51, 0xa6, 0x46, 0x3c, 0x7b, 0x3b,
	0xa6, 0x17, 0x86, 0xd6, 0x48, 0x2c, 0x42, 0xd9, 0x26, 0x79, 0x27, 0xe6, 0xdb, 0xb0, 0x35, 0xb4,
	0x3e, 0x57, 0xf2, 0xb6, 0xf0, 0x38, 0x9d, 0xe3, 0xef, 0xc6, 0xfc, 0x3a, 0x5c, 0x1b, 0x3a, 0xeb,
	0xbd, 0x7d, 0xb0, 0x68, 0x2a, 0x7b, 0x2f, 0xe6, 0x7d, 0xf8, 0xdf, 0x21, 0x8a, 0x90, 0x4d, 0x88,
	0x9c, 0x4e, 0x94, 0x56, 0x41, 0xa1, 0x67, 0xbf, 0xc7, 0x9c, 0xc3, 0xe6, 0x21, 0xe6, 0xd6, 0x28,
	0x39, 0x67, 0xff, 0x11, 0xf3, 0x1d, 0xb8, 0x71, 0xa4, 0x31, 0x47, 0x13, 0x84, 0x7e, 0x48, 0xe1,
	0x8f, 0x1d, 0x52, 0x78, 0x94, 0xd7, 0xfd, 0xa4, 0xb8, 0x67, 0x3f, 0x75, 0x38, 0xc0, 0xa5, 0x23,
	0x69, 0x4d, 0x60, 0x3f, 0x37, 0x61, 0x93, 0x91, 0x4f, 0x4d, 0xf8, 0x97, 0x0e, 0x29, 0x1d, 0x95,
	0x66, 0x2a, 0x9a, 0x7c, 0x23, 0xeb, 0x24, 0x7a, 0xf6, 0xe5, 0x25, 0x7e, 0x15, 0x7a, 0xcf, 0x9b,
	0x50, 0xaa, 0x3a, 0xf3, 0x47, 0x1b, 0x7c, 0x0b, 0x36, 0xc7, 0x62, 0xa6, 0x64, 0x5b, 0xe5, 0x1a,
	0x89, 0x5b, 0x7d, 0xdf, 0xb3, 0x57, 0x12, 0x1a, 0x84, 0x31, 0x06, 0x31, 0xe7, 0xbc, 0x9a, 0xf0,
	0x2b, 0x90, 0x8c, 0x55, 0xae, 0xa4, 0xab, 0xd8, 0x6b, 0x09, 0x69, 0x1f, 0x5b, 0x8d, 0xf2, 0x9c,
	0xbb, 0xaf, 0x27, 0xe4, 0xc2, 0xb8, 0x0a, 0x99, 0xd5, 0xb6, 0x7e, 0x66, 0x71, 0xeb, 0x8d, 0x84,
	0x1a, 0x7e, 0x07, 0x67, 0x0d, 0xf1, 0xd7, 0x84, 0x3c, 0xbf, 0x63, 0xcd, 0x48, 0xcd, 0xb2, 0xa0,
	0xcc, 0xac, 0x7e, 0x8a, 0xfd, 0x96, 0x50, 0x25, 0x77, 0x27, 0x2f, 0xa2, 0x0c, 0x93, 0x15, 0xcf,
	0xbf, 0xeb, 0x12, 0xfd, 0x6e, 0x6e, 0x54, 0x61, 0x03, 0x9a, 0x30, 0x87, 0xbf, 0xef, 0x52, 0x2b,
	0x08, 0x7e, 0x80, 0xce, 0x63, 0xd1, 0xa0, 0x3f, 0x74, 0x69, 0x34, 0x8e, 0xd1, 0xf9, 0x7a, 0x24,
	0xb2, 0xca, 0xaf, 0xd4, 0xfb, 0x49, 0x8f, 0xdf, 0x04, 0xde, 0x80, 0x7e, 0xb5, 0xad, 0x9f, 0xf6,
	0xa8, 0xea, 0x3a, 0x40, 0xda, 0x2b, 0xf6, 0x59, 0x8f, 0x86, 0xa8, 0x8e, 0x9e, 0xa9, 0x90, 0x19,
	0xfb, 0x92, 0xb1, 0x67, 0xa6, 0xf4, 0xe8, 0xd8, 0xe7, 0x3d, 0x92, 0x73, 0xec, 0x54, 0x6e, 0xdd,
	0x54, 0xb5, 0xb9, 0xbf, 0xe8, 0x91, 0x99, 0xa7, 0x52, 0xa1, 0x91, 0xb8, 0x98, 0x16, 0xa8, 0x31,
	0x34, 0xde, 0xba, 0x6a, 0x31, 0x2b, 0x40, 0xb2, 0x4f, 0x0b, 0xe5, 0xd4, 0xca, 0xbc, 0xbd, 0x0f,
	0xa4, 0xac, 0xfe, 0x3d, 0x8d, 0x08, 0xa5, 0x6b, 0x03, 0x1f, 0x00, 0xd5, 0x73, 0xda, 0xfe, 0xe3,
	0x0f, 0x39, 0xfe, 0x21, 0x50, 0x37, 0xee, 0xa1, 0xcc, 0x4c, 0x2d, 0x7b, 0xd5, 0xb5, 0x3f, 0xeb,
	0x8c, 0xf7, 0x9c, 0x30, 0x5e, 0xa2, 0x99, 0x2e, 0x7d, 0xfb, 0x0b, 0x76, 0xd6, 0x59, 0x34, 0x78,
	0x19, 0x92, 0x67, 0xed, 0x73, 0xb4, 0x22, 0xf9, 0x53, 0xd0, 0x79, 0x41, 0xf9, 0xc0, 0xf9, 0xea,
	0x2e, 0x69, 0x36, 0xce, 0xce, 0xcd, 0x8b, 0xf7, 0x8b, 0xdf, 0x5b, 0xe3, 0x4f, 0x43, 0x9c, 0x4e,
	0xa7, 0xfc, 0x1f, 0xf6, 0xd7, 0xbf, 0xdc, 0x9c, 0x6c, 0xd4, 0x4b, 0xf9, 0xd6, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x9c, 0xcc, 0x10, 0x99, 0xa5, 0x05, 0x00, 0x00,
}
